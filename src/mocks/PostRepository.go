// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "jwt-authentication/models"

	mock "github.com/stretchr/testify/mock"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

type PostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PostRepository) EXPECT() *PostRepository_Expecter {
	return &PostRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *PostRepository) Create(user *models.Post) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Post) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PostRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user *models.Post
func (_e *PostRepository_Expecter) Create(user interface{}) *PostRepository_Create_Call {
	return &PostRepository_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *PostRepository_Create_Call) Run(run func(user *models.Post)) *PostRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Post))
	})
	return _c
}

func (_c *PostRepository_Create_Call) Return(_a0 error) *PostRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepository_Create_Call) RunAndReturn(run func(*models.Post) error) *PostRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *PostRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PostRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *PostRepository_Expecter) Delete(id interface{}) *PostRepository_Delete_Call {
	return &PostRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *PostRepository_Delete_Call) Run(run func(id string)) *PostRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PostRepository_Delete_Call) Return(_a0 error) *PostRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepository_Delete_Call) RunAndReturn(run func(string) error) *PostRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPosts provides a mock function with no fields
func (_m *PostRepository) GetAllPosts() ([]models.Post, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPosts")
	}

	var r0 []models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Post, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_GetAllPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPosts'
type PostRepository_GetAllPosts_Call struct {
	*mock.Call
}

// GetAllPosts is a helper method to define mock.On call
func (_e *PostRepository_Expecter) GetAllPosts() *PostRepository_GetAllPosts_Call {
	return &PostRepository_GetAllPosts_Call{Call: _e.mock.On("GetAllPosts")}
}

func (_c *PostRepository_GetAllPosts_Call) Run(run func()) *PostRepository_GetAllPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostRepository_GetAllPosts_Call) Return(_a0 []models.Post, _a1 error) *PostRepository_GetAllPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_GetAllPosts_Call) RunAndReturn(run func() ([]models.Post, error)) *PostRepository_GetAllPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostById provides a mock function with given fields: id
func (_m *PostRepository) GetPostById(id string) (*models.Post, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostById")
	}

	var r0 *models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepository_GetPostById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostById'
type PostRepository_GetPostById_Call struct {
	*mock.Call
}

// GetPostById is a helper method to define mock.On call
//   - id string
func (_e *PostRepository_Expecter) GetPostById(id interface{}) *PostRepository_GetPostById_Call {
	return &PostRepository_GetPostById_Call{Call: _e.mock.On("GetPostById", id)}
}

func (_c *PostRepository_GetPostById_Call) Run(run func(id string)) *PostRepository_GetPostById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PostRepository_GetPostById_Call) Return(_a0 *models.Post, _a1 error) *PostRepository_GetPostById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepository_GetPostById_Call) RunAndReturn(run func(string) (*models.Post, error)) *PostRepository_GetPostById_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
